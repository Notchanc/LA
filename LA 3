Practical No.3

Aim To compute orthonormal vectors using Gram Schimdt Process

Q.1 (a). Compute the orthonormal vectors using the GS algorithm using
      python using inbuilt function.

code:

import numpy as np

def gram_schmidt(A):
    Q, R = np.linalg.qr(A)
    return Q

# Example usage
A = np.array([[2, 3], [1, 4]])

Q = gram_schmidt(A)

print("Orthonormal basis vectors:")
print(Q)


Q.1 (b) Compute the orthonormal vectors using the GS algorithm using python 
         without using inbuilt function.

code:

import numpy as np

def gram_schmidt(A):
    Q, _ = np.linalg.qr(A)
    return Q

A = np.array([[2, 3], [1, 4]])
Q = gram_schmidt(A)
print("Orthonormal basis vectors:")
print(Q)
import numpy as np

def gram_schmidt(vectors):
    """Compute the Orthonormal basis using the Gram-Schmidt process."""
    orthonormal_vectors = []

    for v in vectors:
        for u in orthonormal_vectors:
            v -= np.dot(v, u) * u

        if np.linalg.norm(v) > 1e-10:
            orthonormal_vectors.append(v / np.linalg.norm(v))

    return np.array(orthonormal_vectors)

if __name__ == "__main__":
    vectors = np.array([[1, 1, 0], [1, 0, 1], [0, 1, 1]]).T
    orthonormal_vectors = gram_schmidt(vectors)

    print("Orthonormal basis:")
    print(orthonormal_vectors)


output:
Orthonormal basis vectors :
[[ 0.70710678 0.70710678 0.       ]
[0.40824829 -0.40824829 0.81649658]
[-0.57735027 0.57735027 0.57735027]]  
